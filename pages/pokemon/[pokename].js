import { useRouter } from "next/router";
import styles from "../../styles/Home.module.css";
import Head from "next/head";
import Search from "../../components/Search";

export async function getStaticPaths() {
  //set up static path rendering
  const request = await fetch("http://pokeapi.co/api/v2/pokemon?limit=1126"); //await getNodeIds so that valid paths are not empty
  const json = await request.json();
  const pokenames = json.results.map((item) => {
    return { pokename: item.name };
  });
  const valid_paths = pokenames.map(({ pokename }) => {
    return { params: { pokename } };
  }); // valid paths are constructed by mapping a function to node_ids, which takes the value of nodeIds as an argument, returning the value as params to valid paths

  return {
    paths: valid_paths, //validpaths is structured as {{params: value} {params: value} ....}
    fallback: false, // See the "fallback" section in nextjs documentation; essentially its to allow for users to access a statically generated version of the page before getstaticprops finishes to avoid 404 errors
  };
}

const PokemonInfo = ({ pokedata, pokedata2 }) => {
  const router = useRouter();
  let habitat = "";
  // const { pokename } = router.query;
  if (pokedata.habitat == null) {
    habitat = "null";
  } else habitat = pokedata.habitat.name.toString();
  return (
    <>
      <Head>
        <title>{pokedata.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.main}>
        <Search />
        <div className={styles.card}>
          <p>
            <b>Name: </b>
            {pokedata.name}
          </p>
          <p>
            <b>Description: </b>
            {pokedata.flavor_text_entries[1].flavor_text}
          </p>
          <p>
            <b>Height: </b>
            {pokedata2.height}
          </p>
          <p>
            <b>Types: </b>
            {pokedata2.types.map((item, index) => {
              return <li key={index}>{item.type.name}</li>;
            })}
          </p>
          <p>
            <b>Habitat: </b>
            {habitat}
          </p>
          <p>
            <b>Legendary: </b>
            {pokedata.is_legendary.toString()}
          </p>
          <div style={{ paddingTop: 10 }}>
            <a href="/" style={{ color: "blue" }}>
              Back to front page
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export default PokemonInfo;

export async function getStaticProps({ params }) {
  const request = await fetch(
    `http://pokeapi.co/api/v2/pokemon-species/${params.pokename}`
  );
  const request2 = await fetch(
    `http://pokeapi.co/api/v2/pokemon/${params.pokename}`
  );
  const pokedata = await request.json();
  const pokedata2 = await request2.json();

  return {
    props: { pokedata, pokedata2 },
  };
}
